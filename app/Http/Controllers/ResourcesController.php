<?php
namespace App\Http\Controllers;

use App\Lease;
use App\Resource;
use App\Http\Requests;
use App\Transformers\ResourceTransformer;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

/**
 * Services all routes starting with "/leases".
 *
 * Class ResourcesController
 * @package App\Http\Controllers
 */
class ResourcesController extends ApiController
{
    /**
     * Errors that can only be generated by this controller - will be merged with parents $errorList in constructor.
     *
     * @var array
     */
    protected $controllerErrors = [
        101 => ['No resources match your search string', 404],
        102 => ['More than one OS type is matching your search string, please refine', 300],
        103 => ['You have exceeded search limits, please try again later', 429],
    ];

    /**
     * Prepares for custom data transformations.
     */
    public function __construct()
    {
        // Without this $controllerErrors will not get merged into the error list
        parent::__construct();

        // Differently from the LeaseTransformer, ResourceTransformer this one is not controlled by Fractal for 2 reasons:
        // a) transformation is needed even BEFORE data is used by ApiController
        // b) since the collection structure is change, Fractal's transform() is not sufficient
        $this->transformer = new ResourceTransformer();
    }


    /**
     * Returns a collections of distros.
     *
     * @param string $string
     * @return mixed
     */
    public function search($string = '_')
    {
        $resources = $this->findResources($string);
        $distros = $this->transformer->getDistros($resources);
        return $this->respond($distros);
    }


    /**
     * Returns resources that are leasable.
     *
     * @param $string
     * @return mixed
     */
    protected function findResources($string)
    {
        // Searching supports not just "fedora" as input, but also "fedora-2" and "fedora-22"
        $resources = Resource::like(DB::raw("CONCAT(os,'-',os_version)"), $string)->orderBy('os',
            'asc')->orderBy('os_version', 'desc');

        // Removing resources that are under active leases could be accomplished several ways:
        // - Table join (downside - if tables are big, joins might be slow)
        // - Performing filtering right in the PHP (downside - few lines of extra code)
        // - Using `not in ()` syntax within MySQL (golden middle in this case)
        $activeLeases = Lease::active()->select('resource_id')->get();
        $resources = $resources->whereNotIn('id', $activeLeases)->get();

        return $resources;
    }


    /**
     * Creates a new lease and returns some basic details about it.
     * Request might also contain optional $_GET['duration'] parameter, otherwise a default value will be used.
     *
     * @param $string
     * @param Request $request
     * @return mixed
     */
    public function lease($string, Request $request)
    {
        $picker = $this->pickResource($string);

        if ($picker['error']) {
            return $this->respondWithError($picker['error']);
        }

        $resource = Resource::find($picker['resourceId']);

        $leaseParams = Lease::stub($resource->id, null, $request->duration);

        $lease = Lease::create($leaseParams);
        $response = [
            'leased_at' => Carbon::now(),
            'links' => [
                'rel' => 'details',
                'uri' => '/leases/' . $lease->uuid,
            ],
        ];
        return $this->respond($response, 201);
    }

    /**
     * Deals with the logic of determining which resource should be reserved based on the searchString
     *
     * @param $searchString
     * @return array
     */
    protected function pickResource($searchString)
    {
        $resourceId = null;
        $error = null;

        // get all un-leased resources matching the search, only show 1 instance of each
        $matches = $this->findResources($searchString);

        $distros = $this->transformer->getDistros($matches);

        if (count($distros) == 0) {
            $error = 101;
        } elseif (count($distros) > 1) {
            $error = 102;
        } else {
            $resourceId = $matches->first()->id; // Pick the latest available version of the OS
        }

        return ['resourceId' => $resourceId, 'error' => $error];
    }
}
